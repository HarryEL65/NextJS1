{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/harryelnekave/Desktop/DEV/NextJS/06-onwards-to-a-bigger-project-starting-project/pages/[meetupId]/index.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// the same way we have in regular React Project dynamic id (e.g:  our-domain/:id)\nimport { Router, useRouter } from \"next/router\";\nimport { useEffect } from \"react/cjs/react.development\";\nimport MeetupDetails from \"../../components/meetups/MeetupDetails\"; // our-domain/<dynamic-id>\n\nconst MeetupDetailsDynamicPage = props => {\n  return /*#__PURE__*/_jsxDEV(MeetupDetails, _objectSpread({}, props.meetupData), void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 10\n  }, this);\n}; // With getStaticProps a page is pre-generated during the Build Process\n// now what does this mean? this means that of Coures NextJS to pregenerate all versions of this dynamic Page\n// in advance for all the supported meetupId's because since thi is dynamic NextJS needs to know for which meetupsId's values\n// it should pregenerate the page\n// keep in mind that this is not pregenerated when the user visist thsi page with a specific meetupId but during the build process\n// so here we need to pregenrate for all the potential url (meetupId's) user might be entering on Run Time\n// and if they enter a value for which we did not pregenerage a page they will see a 404 Page not found error\n// this is why we are using this getStaticPaths function where we describe all the dynamcis segments so all the meetupId's in this\n// case where a page should be pregeneragted\n\n\nexport const getStaticPaths = async () => {\n  return {\n    // this fallback value determine whether the paths array return all the meetupId's value if set to false\n    // or only some of them when set to true.\n    // that means that if a user enter a meetupId path that is not supported in the paths array a 404 Page not found\n    // will be retrieved\n    fallback: false,\n    // In reality we won't of course hardcode those values manually but fetch for your supported meetupId's from a database\n    // or from an API and that will retrieve that array dynamcally\n    paths: [{\n      params: {\n        meetupId: \"m1\"\n      }\n    }, {\n      params: {\n        meetupId: \"m2\"\n      }\n    }]\n  };\n};\nexport const getStaticProps = async context => {\n  // Fetch data for a single meetup\n  // To fetch the data for the meetup we need a way to identify the meetup\n  // Here we need a way to identify the id and the id is thankfully encoded in th URL\n  // and basically we could have use the useRouter hook from NextJS to identify the id and use the query to reach the meetupdId\n  // But the problem is that the useRouter Hook can only be use in Component Function not in getStaticProps\n  // Hopefully the getStaticProps also receive a context as Parameter\n  // (although you cannot access the req and res as you do in getSerevrSideProps)\n  // but has a params key\n  const meetupId = context.params.meetupId;\n  console.log(meetupId);\n  return {\n    props: {\n      meetupData: {\n        id: meetupId,\n        title: \"A Second Meetup\",\n        image: \"https://upload.wikimedia.org/wikipedia/commons/thumb/d/d3/Stadtbild_M%C3%BCnchen.jpg/640px-Stadtbild_M%C3%BCnchen.jpg\",\n        address: \"Some address 3, the best city\",\n        description: \"this is a second meetup\"\n      }\n    }\n  };\n};\nexport default MeetupDetailsDynamicPage;","map":{"version":3,"sources":["/Users/harryelnekave/Desktop/DEV/NextJS/06-onwards-to-a-bigger-project-starting-project/pages/[meetupId]/index.js"],"names":["Router","useRouter","useEffect","MeetupDetails","MeetupDetailsDynamicPage","props","meetupData","getStaticPaths","fallback","paths","params","meetupId","getStaticProps","context","console","log","id","title","image","address","description"],"mappings":";;;;;;;;;AAAA;AAEA,SAASA,MAAT,EAAiBC,SAAjB,QAAkC,aAAlC;AACA,SAASC,SAAT,QAA0B,6BAA1B;AACA,OAAOC,aAAP,MAA0B,wCAA1B,C,CACA;;AACA,MAAMC,wBAAwB,GAAIC,KAAD,IAAW;AAC1C,sBAAO,QAAC,aAAD,oBAAmBA,KAAK,CAACC,UAAzB;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,CAFD,C,CAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,OAAO,MAAMC,cAAc,GAAG,YAAY;AACxC,SAAO;AACL;AACA;AACA;AACA;AACAC,IAAAA,QAAQ,EAAE,KALL;AAML;AACA;AACAC,IAAAA,KAAK,EAAE,CACL;AACEC,MAAAA,MAAM,EAAE;AACNC,QAAAA,QAAQ,EAAE;AADJ;AADV,KADK,EAML;AACED,MAAAA,MAAM,EAAE;AACNC,QAAAA,QAAQ,EAAE;AADJ;AADV,KANK;AARF,GAAP;AAqBD,CAtBM;AAwBP,OAAO,MAAMC,cAAc,GAAG,MAAOC,OAAP,IAAmB;AAC/C;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAMF,QAAQ,GAAGE,OAAO,CAACH,MAAR,CAAeC,QAAhC;AACAG,EAAAA,OAAO,CAACC,GAAR,CAAYJ,QAAZ;AAEA,SAAO;AACLN,IAAAA,KAAK,EAAE;AACLC,MAAAA,UAAU,EAAE;AACVU,QAAAA,EAAE,EAAEL,QADM;AAEVM,QAAAA,KAAK,EAAE,iBAFG;AAGVC,QAAAA,KAAK,EACH,uHAJQ;AAKVC,QAAAA,OAAO,EAAE,+BALC;AAMVC,QAAAA,WAAW,EAAE;AANH;AADP;AADF,GAAP;AAYD,CAzBM;AA2BP,eAAehB,wBAAf","sourcesContent":["// the same way we have in regular React Project dynamic id (e.g:  our-domain/:id)\n\nimport { Router, useRouter } from \"next/router\";\nimport { useEffect } from \"react/cjs/react.development\";\nimport MeetupDetails from \"../../components/meetups/MeetupDetails\";\n// our-domain/<dynamic-id>\nconst MeetupDetailsDynamicPage = (props) => {\n  return <MeetupDetails {...props.meetupData} />;\n};\n\n// With getStaticProps a page is pre-generated during the Build Process\n// now what does this mean? this means that of Coures NextJS to pregenerate all versions of this dynamic Page\n// in advance for all the supported meetupId's because since thi is dynamic NextJS needs to know for which meetupsId's values\n// it should pregenerate the page\n// keep in mind that this is not pregenerated when the user visist thsi page with a specific meetupId but during the build process\n// so here we need to pregenrate for all the potential url (meetupId's) user might be entering on Run Time\n// and if they enter a value for which we did not pregenerage a page they will see a 404 Page not found error\n// this is why we are using this getStaticPaths function where we describe all the dynamcis segments so all the meetupId's in this\n// case where a page should be pregeneragted\nexport const getStaticPaths = async () => {\n  return {\n    // this fallback value determine whether the paths array return all the meetupId's value if set to false\n    // or only some of them when set to true.\n    // that means that if a user enter a meetupId path that is not supported in the paths array a 404 Page not found\n    // will be retrieved\n    fallback: false,\n    // In reality we won't of course hardcode those values manually but fetch for your supported meetupId's from a database\n    // or from an API and that will retrieve that array dynamcally\n    paths: [\n      {\n        params: {\n          meetupId: \"m1\",\n        },\n      },\n      {\n        params: {\n          meetupId: \"m2\",\n        },\n      },\n    ],\n  };\n};\n\nexport const getStaticProps = async (context) => {\n  // Fetch data for a single meetup\n\n  // To fetch the data for the meetup we need a way to identify the meetup\n  // Here we need a way to identify the id and the id is thankfully encoded in th URL\n  // and basically we could have use the useRouter hook from NextJS to identify the id and use the query to reach the meetupdId\n  // But the problem is that the useRouter Hook can only be use in Component Function not in getStaticProps\n  // Hopefully the getStaticProps also receive a context as Parameter\n  // (although you cannot access the req and res as you do in getSerevrSideProps)\n  // but has a params key\n  const meetupId = context.params.meetupId;\n  console.log(meetupId);\n\n  return {\n    props: {\n      meetupData: {\n        id: meetupId,\n        title: \"A Second Meetup\",\n        image:\n          \"https://upload.wikimedia.org/wikipedia/commons/thumb/d/d3/Stadtbild_M%C3%BCnchen.jpg/640px-Stadtbild_M%C3%BCnchen.jpg\",\n        address: \"Some address 3, the best city\",\n        description: \"this is a second meetup\",\n      },\n    },\n  };\n};\n\nexport default MeetupDetailsDynamicPage;\n"]},"metadata":{},"sourceType":"module"}