{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/harryelnekave/Desktop/DEV/NextJS/06-onwards-to-a-bigger-project-starting-project/pages/index.js\";\n// our-domain.com/\n// import { useState, useEffect } from \"react/cjs/react.development\";\nimport { MongoClient } from \"mongodb\";\nimport MeetupList from \"../components/meetups/MeetupList\"; // our-domain.com/new-meetup\n\nconst DUMMY_MEETUPS = [{\n  id: \"m1\",\n  title: \"A First Meetup\",\n  image: \"https://upload.wikimedia.org/wikipedia/commons/thumb/d/d3/Stadtbild_M%C3%BCnchen.jpg/640px-Stadtbild_M%C3%BCnchen.jpg\",\n  address: \"Some address 5, 123gg Some city\",\n  description: \"this is a first meetup\"\n}, {\n  id: \"m2\",\n  title: \"A Second Meetup\",\n  image: \"https://upload.wikimedia.org/wikipedia/commons/thumb/d/d3/Stadtbild_M%C3%BCnchen.jpg/640px-Stadtbild_M%C3%BCnchen.jpg\",\n  address: \"Some address 3, the best city\",\n  description: \"this is a second meetup\"\n}];\n\nconst HomePage = props => {\n  // const [loadedMeetups, setLoadedMeetups] = useState([]);\n  // useEffect(() => {\n  //   // send a http request and fetch data\n  //   setLoadedMeetups(DUMMY_MEETUPS);\n  // }, []);\n  // // in the first Render cycle of the Component the\n  // // loadedMeetups value will have the empty array as a default value\n  // return <MeetupList meetups={loadedMeetups} />;\n  return /*#__PURE__*/_jsxDEV(MeetupList, {\n    meetups: props.meetups\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 10\n  }, this);\n}; // Only in Component Files inside the Page Folder\n// you can export the getStaticProps function (the name is important)\n// this is as reserve Name. NextJS Will look for a function\n// with that name and if it finds it will execute that function\n// during the Prerendering process so that it will not direclty call our\n// component function and use the return jsx snapshot as html content but\n// will first of all call the getStaticProps before it call the Component function\n// getStaticProps has this name because indeed his job is to prepare props for this page\n// and this props could then get contains the data this page needs.\n// and that usefull because getStaticProps is allowed to be asynchronous.\n// You can return a promise and then... this is the key thing NextJS will wait until this promise to\n// resolve which means it waits your data is loaded to return the props for the component function.\n// And with that you're able to load data before component function is executed\n// so that this component can be rendered with the require data.\n// that mean that data SEO will have access to the data also\n\n\nexport const getStaticProps = async () => {\n  // in this function you can also execute any code that will\n  // normally run on a server...\n  // you can access a fileSystem here or securely connect to a Database\n  // because any code is written here will never endup or run on Client side\n  // simply because this code is executed during the Build Process\n  const client = await MongoClient.connect(\"mongodb+srv://admin:admin@cluster0.tcybw5n.mongodb.net/meetupsDB\");\n  const db = client.db();\n  const meetupsCollection = db.collection(\"meetups\");\n  const meetups = await meetupsCollection.find().toArray(); // Close the client connection\n\n  client.close();\n  return {\n    props: {\n      // this is the object we receive as props in the Component functio\n      // const HomePage = (props) => {...\n      meetups: meetups.map(meetup => ({\n        title: meetup.title,\n        address: meetup.address,\n        image: meetup.image,\n        // because the id should be converted to a string we must proceed map on meetups to transform the data\n        // instead as using it's default value\n        id: meetup.id.toString()\n      }))\n    },\n    revalidate: 3600\n  };\n}; // export const getServerSideProps = async (context) => {\n//   // Just like getStaticProps this is a reserved name.\n//   // This function will not run during the build process but instead on the server\n//   // after deployment.\n//   // We can still fetch data from an API or from the fileSystem and any code you write here\n//   // will always run on the server never in the Client\n//   // so you can do operation that use credentials for example\n//   // if you need you can have access to the incoming request and response through the contex\n//   const req = context.req;\n//   const res = context.res;\n//   return {\n//     props: {\n//       meetups: DUMMY_MEETUPS,\n//     },\n//     // this code will run for every incoming request and not after a revalidate delay\n//   };\n// };\n\nexport default HomePage;","map":{"version":3,"sources":["/Users/harryelnekave/Desktop/DEV/NextJS/06-onwards-to-a-bigger-project-starting-project/pages/index.js"],"names":["MongoClient","MeetupList","DUMMY_MEETUPS","id","title","image","address","description","HomePage","props","meetups","getStaticProps","client","connect","db","meetupsCollection","collection","find","toArray","close","map","meetup","toString","revalidate"],"mappings":";;AAAA;AACA;AACA,SAASA,WAAT,QAA4B,SAA5B;AACA,OAAOC,UAAP,MAAuB,kCAAvB,C,CACA;;AAEA,MAAMC,aAAa,GAAG,CACpB;AACEC,EAAAA,EAAE,EAAE,IADN;AAEEC,EAAAA,KAAK,EAAE,gBAFT;AAGEC,EAAAA,KAAK,EACH,uHAJJ;AAKEC,EAAAA,OAAO,EAAE,iCALX;AAMEC,EAAAA,WAAW,EAAE;AANf,CADoB,EASpB;AACEJ,EAAAA,EAAE,EAAE,IADN;AAEEC,EAAAA,KAAK,EAAE,iBAFT;AAGEC,EAAAA,KAAK,EACH,uHAJJ;AAKEC,EAAAA,OAAO,EAAE,+BALX;AAMEC,EAAAA,WAAW,EAAE;AANf,CAToB,CAAtB;;AAmBA,MAAMC,QAAQ,GAAIC,KAAD,IAAW;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAO,QAAC,UAAD;AAAY,IAAA,OAAO,EAAEA,KAAK,CAACC;AAA3B;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,CAVD,C,CAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,OAAO,MAAMC,cAAc,GAAG,YAAY;AACxC;AACA;AACA;AACA;AACA;AACA,QAAMC,MAAM,GAAG,MAAMZ,WAAW,CAACa,OAAZ,CACnB,kEADmB,CAArB;AAGA,QAAMC,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX;AACA,QAAMC,iBAAiB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAA1B;AAEA,QAAMN,OAAO,GAAG,MAAMK,iBAAiB,CAACE,IAAlB,GAAyBC,OAAzB,EAAtB,CAZwC,CAcxC;;AACAN,EAAAA,MAAM,CAACO,KAAP;AAEA,SAAO;AACLV,IAAAA,KAAK,EAAE;AACL;AACA;AACAC,MAAAA,OAAO,EAAEA,OAAO,CAACU,GAAR,CAAaC,MAAD,KAAa;AAChCjB,QAAAA,KAAK,EAAEiB,MAAM,CAACjB,KADkB;AAEhCE,QAAAA,OAAO,EAAEe,MAAM,CAACf,OAFgB;AAGhCD,QAAAA,KAAK,EAAEgB,MAAM,CAAChB,KAHkB;AAIhC;AACA;AACAF,QAAAA,EAAE,EAAEkB,MAAM,CAAClB,EAAP,CAAUmB,QAAV;AAN4B,OAAb,CAAZ;AAHJ,KADF;AAaLC,IAAAA,UAAU,EAAE;AAbP,GAAP;AAeD,CAhCM,C,CAiCP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAef,QAAf","sourcesContent":["// our-domain.com/\n// import { useState, useEffect } from \"react/cjs/react.development\";\nimport { MongoClient } from \"mongodb\";\nimport MeetupList from \"../components/meetups/MeetupList\";\n// our-domain.com/new-meetup\n\nconst DUMMY_MEETUPS = [\n  {\n    id: \"m1\",\n    title: \"A First Meetup\",\n    image:\n      \"https://upload.wikimedia.org/wikipedia/commons/thumb/d/d3/Stadtbild_M%C3%BCnchen.jpg/640px-Stadtbild_M%C3%BCnchen.jpg\",\n    address: \"Some address 5, 123gg Some city\",\n    description: \"this is a first meetup\",\n  },\n  {\n    id: \"m2\",\n    title: \"A Second Meetup\",\n    image:\n      \"https://upload.wikimedia.org/wikipedia/commons/thumb/d/d3/Stadtbild_M%C3%BCnchen.jpg/640px-Stadtbild_M%C3%BCnchen.jpg\",\n    address: \"Some address 3, the best city\",\n    description: \"this is a second meetup\",\n  },\n];\n\nconst HomePage = (props) => {\n  // const [loadedMeetups, setLoadedMeetups] = useState([]);\n  // useEffect(() => {\n  //   // send a http request and fetch data\n  //   setLoadedMeetups(DUMMY_MEETUPS);\n  // }, []);\n  // // in the first Render cycle of the Component the\n  // // loadedMeetups value will have the empty array as a default value\n  // return <MeetupList meetups={loadedMeetups} />;\n  return <MeetupList meetups={props.meetups} />;\n};\n// Only in Component Files inside the Page Folder\n// you can export the getStaticProps function (the name is important)\n// this is as reserve Name. NextJS Will look for a function\n// with that name and if it finds it will execute that function\n// during the Prerendering process so that it will not direclty call our\n// component function and use the return jsx snapshot as html content but\n// will first of all call the getStaticProps before it call the Component function\n// getStaticProps has this name because indeed his job is to prepare props for this page\n// and this props could then get contains the data this page needs.\n// and that usefull because getStaticProps is allowed to be asynchronous.\n// You can return a promise and then... this is the key thing NextJS will wait until this promise to\n// resolve which means it waits your data is loaded to return the props for the component function.\n// And with that you're able to load data before component function is executed\n// so that this component can be rendered with the require data.\n// that mean that data SEO will have access to the data also\nexport const getStaticProps = async () => {\n  // in this function you can also execute any code that will\n  // normally run on a server...\n  // you can access a fileSystem here or securely connect to a Database\n  // because any code is written here will never endup or run on Client side\n  // simply because this code is executed during the Build Process\n  const client = await MongoClient.connect(\n    \"mongodb+srv://admin:admin@cluster0.tcybw5n.mongodb.net/meetupsDB\"\n  );\n  const db = client.db();\n  const meetupsCollection = db.collection(\"meetups\");\n\n  const meetups = await meetupsCollection.find().toArray();\n\n  // Close the client connection\n  client.close();\n\n  return {\n    props: {\n      // this is the object we receive as props in the Component functio\n      // const HomePage = (props) => {...\n      meetups: meetups.map((meetup) => ({\n        title: meetup.title,\n        address: meetup.address,\n        image: meetup.image,\n        // because the id should be converted to a string we must proceed map on meetups to transform the data\n        // instead as using it's default value\n        id: meetup.id.toString(),\n      })),\n    },\n    revalidate: 3600,\n  };\n};\n// export const getServerSideProps = async (context) => {\n//   // Just like getStaticProps this is a reserved name.\n//   // This function will not run during the build process but instead on the server\n//   // after deployment.\n//   // We can still fetch data from an API or from the fileSystem and any code you write here\n//   // will always run on the server never in the Client\n//   // so you can do operation that use credentials for example\n//   // if you need you can have access to the incoming request and response through the contex\n//   const req = context.req;\n//   const res = context.res;\n\n//   return {\n//     props: {\n//       meetups: DUMMY_MEETUPS,\n//     },\n//     // this code will run for every incoming request and not after a revalidate delay\n//   };\n// };\nexport default HomePage;\n"]},"metadata":{},"sourceType":"module"}