{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\n// our-domain.com/\n// import { useState, useEffect } from \"react/cjs/react.development\";\nimport MeetupList from \"../components/meetups/MeetupList\"; // our-domain.com/new-meetup\n\nvar HomePage = function HomePage(props) {\n  // const [loadedMeetups, setLoadedMeetups] = useState([]);\n  // useEffect(() => {\n  //   // send a http request and fetch data\n  //   setLoadedMeetups(DUMMY_MEETUPS);\n  // }, []);\n  // // in the first Render cycle of the Component the\n  // // loadedMeetups value will have the empty array as a default value\n  // return <MeetupList meetups={loadedMeetups} />;\n  return /*#__PURE__*/_jsx(MeetupList, {\n    meetups: props.meetups\n  });\n}; // Only in Component Files inside the Page Folder\n// you can export the getStaticProps function (the name is important)\n// this is as reserve Name. NextJS Will look for a function\n// with that name and if it finds it will execute that function\n// during the Prerendering process so that it will not direclty call our\n// component function and use the return jsx snapshot as html content but\n// will first of all call the getStaticProps before it call the Component function\n// getStaticProps has this name because indeed his job is to prepare props for this page\n// and this props could then get contains the data this page needs.\n// and that usefull because getStaticProps is allowed to be asynchronous.\n// You can return a promise and then... this is the key thing NextJS will wait until this promise to\n// resolve which means it waits your data is loaded to return the props for the component function.\n// And with that you're able to load data before component function is executed\n// so that this component can be rendered with the require data.\n// that mean that data SEO will have access to the data also\n\n\nexport var __N_SSG = true;\nexport default HomePage;","map":null,"metadata":{},"sourceType":"module"}